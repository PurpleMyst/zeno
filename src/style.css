* {
  /* Use the saner border-box box-sizing */
  box-sizing: border-box;
}

*:not(input) {
  /* Do not allow selection of anything that isn't an input */
  user-select: none;
}

:focus {
  outline: 0;
}

button {
  font-family: inherit;
  font-size: 0.8rem;
}

main {
  /* Position <main> above everything in the top left */
  z-index: 99999;
  position: fixed;
  left: 0;
  top: 0;
  width: 480px;
  max-width: 100vw;
  height: auto;

  /* When unfocused, show just a portion of <main> */
  transform: translateY(calc(-100% + 3rem));

  /* <main> is a vertical flexbox container, justified towards the end */
  display: flex;
  flex-direction: column;
  justify-content: end;

  /* When unfocused, hide the overflow */
  overflow: hidden;

  /* Indicate that <main> is clickable */
  cursor: pointer;

  /* General styling */
  background: white;
  box-shadow: 0 0.1rem 0.25rem #0004;
  border-radius: 0 0 0.75rem 0;
  padding: 1rem 1rem 0 1rem;
  font-family: "Google Sans", Roboto, RobotDraft, Helvetica, sans-serif, serif;
  font-size: 1rem;
}

/* Style for "collapse" text */
main #collapse {
  background: white;
  cursor: pointer;
  margin-bottom: 0.5rem;
}

/* Focused <main> */
main.focus {
  /* This reverts the "default" <main> transform which hides it above the page */
  transform: none;

  padding-bottom: 1rem;
  cursor: default;
}

/* Minimized <main> */
main.minimize {
  /* Make it smol */
  width: 1rem;
  padding-right: 0;

  /* round the top-right */
  border-top-right-radius: 0.75rem;
}

main.minimize :not(#fold),
main.minimize #fold :not(#minimize) {
  /* Anything that's not the "unminimize" triangle should be hidden when minimized */
  display: none;
}

main.minimize #minimize {
  display: block;
  margin-bottom: 1rem;
}

/* Hide the fold when focused */
main.focus #fold {
  display: none;
}

/* Minimize button */
#minimize {
  /* General styling */
  font-family: inherit;
  font-size: 0.5rem;
  font-weight: bold;
  color: #444;
  text-align: center;
  border: 0;
  background: white;
  overflow-wrap: anywhere;

  /* Indicate the triangle's clickability */
  cursor: pointer;

  /* Size the triangle as 1rem */
  flex: 0 0 1rem;
  width: 1rem;

  /* Disable margin-bottom transition */
  transition: margin-bottom 0s;

  /* When not minimized and not hovered, move to the left */
  margin-left: -1rem;
}

#minimize::before {
  content: "◀";
  transition: inherit;
}

#minimize:hover::before,
main.minimize #minimize::before {
  /* When hovered but not minimized, move to the right */
  /* When not hovered but minimized, move to the left */
  margin-left: -2px;
}

main.minimize #minimize::before {
  /* Flip the triangle's direction when minimized to indicate unminimization */
  content: "▶";
}

main.minimize:hover #minimize::before {
  /* When hovered and minimized, move to the right */
  margin-left: 0;
}

#previews {
  display: grid;
  grid-template-columns: auto auto auto;
  grid-auto-rows: max-content;
  align-items: center;
}

#previews video,
#previews canvas {
  /* as beeg as possible */
  width: 100%;
  height: 100%;

  /* show pretty background */
  background-image: linear-gradient(
    90deg,
    hsl(18, 100%, 68%) 16.7%,
    hsl(-10, 100%, 80%) 16.7%,
    hsl(-10, 100%, 80%) 33.3%,
    hsl(5, 90%, 72%) 33.3%,
    hsl(5, 90%, 72%) 50%,
    hsl(48, 100%, 75%) 50%,
    hsl(48, 100%, 75%) 66.7%,
    hsl(36, 100%, 70%) 66.7%,
    hsl(36, 100%, 70%) 83.3%,
    hsl(20, 90%, 70%) 83.3%
  );
}

#title {
  font-size: 1rem;
  font-weight: normal;
  text-align: center;
  color: #444;
  line-height: 1.5rem;
}

:hover #title {
  /* Tiny nudge downwards */
  transform: translateY(0.1rem);
}

/* Turn the "fold" into a CSS grid. */
#fold {
  display: grid;
}

/* set every element to have grid androw 1. this works. do i know why? no! */
#fold * {
  grid-row: 1;
  grid-column: 1;
}

/* Show/hide the previews if focused/unfocused */
#preview-container {
  display: none;
}

.focus #preview-container {
  display: flex;
}

.focus #previews {
  height: auto;
}

/* Style our inputs */

#inputs {
  display: grid;
  grid-template-columns: auto auto;
  grid-auto-rows: max-content;
}

label {
  height: 2rem;
}

#inputs button,
input,
#collapse {
  height: 1.5rem;
  border-radius: 0.4rem;
  border: 0.25rem solid lightgray;
}

#inputs button:hover,
input:hover,
#collapse:hover {
  border: 0.25rem solid gray;
}

#presets > :hover {
  background: #0003;
}

#presets > :focus {
  background: black;
  color: white;
}

#presets:focus-within,
#collapse:focus {
  border-color: black;
}

/* Style our inputs */

input[type="range"] {
  -webkit-appearance: none;
  --gradient: transparent, transparent;
  --rainbow: hsl(0, 80%, 75%), hsl(30, 80%, 75%), hsl(60, 80%, 75%),
    hsl(90, 80%, 75%), hsl(120, 80%, 75%), hsl(150, 80%, 75%),
    hsl(180, 80%, 75%), hsl(210, 80%, 75%), hsl(240, 80%, 75%),
    hsl(270, 80%, 75%), hsl(300, 80%, 75%), hsl(330, 80%, 75%);
  background: linear-gradient(90deg, var(--gradient)),
    linear-gradient(90deg, var(--rainbow));
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  background: white;
  width: 1rem;
  height: 1rem;
  border: 0.25rem solid black;
  border-radius: 0.5rem;
}

input[type="range"]:focus::-webkit-slider-thumb {
  border-color: white;
  background: black;
}

input#pillarbox,
input#letterbox {
  --gradient: black, white;
}
